Debug test in memory for case 2

==188== Memcheck, a memory error detector
==188== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==188== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==188== Command: ./main
==188== 
Size: 20
Order flag: 2
Search flag: 2
Key: 93
==188== Invalid read of size 4
==188==    at 0x10957A: merge(std::vector<int, std::allocator<int> >&, int, int, int) (ordenaMerge.h:32)
==188==    by 0x109459: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:15)
==188==    by 0x10942D: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:13)
==188==    by 0x10942D: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:13)
==188==    by 0x10942D: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:13)
==188==    by 0x10942D: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:13)
==188==    by 0x10A006: main (main.cpp:140)
==188==  Address 0x4da8ec4 is 0 bytes after a block of size 4 alloc'd
==188==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==188==    by 0x10B45F: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:114)
==188==    by 0x10B2EC: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:443)
==188==    by 0x10B037: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:343)
==188==    by 0x10AD1A: std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (stl_vector.h:358)
==188==    by 0x10A756: std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (stl_vector.h:302)
==188==    by 0x10A3A8: std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) (stl_vector.h:508)
==188==    by 0x1094F9: merge(std::vector<int, std::allocator<int> >&, int, int, int) (ordenaMerge.h:26)
==188==    by 0x109459: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:15)
==188==    by 0x10942D: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:13)
==188==    by 0x10942D: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:13)
==188==    by 0x10942D: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:13)
==188== 
==188== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==188== 
==188== Process terminating with default action of signal 11 (SIGSEGV)
==188==  Access not within mapped region at address 0x1FFE801FE8
==188== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==188==    at 0x1093EF: ordenaMerge(std::vector<int, std::allocator<int> >&, int, int) (ordenaMerge.h:9)
==188==  If you believe this happened as a result of a stack
==188==  overflow in your program's main thread (unlikely but
==188==  possible), you can try to increase the size of the
==188==  main thread stack using the --main-stacksize= flag.
==188==  The main thread stack size used in this run was 8388608.
==188== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==188== 
==188== Process terminating with default action of signal 11 (SIGSEGV)
==188==  Access not within mapped region at address 0x1FFE801FD8
==188== Stack overflow in thread #1: can't grow stack to 0x1ffe801000
==188==    at 0x4831134: _vgnU_freeres (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so)
==188==  If you believe this happened as a result of a stack
==188==  overflow in your program's main thread (unlikely but
==188==  possible), you can try to increase the size of the
==188==  main thread stack using the --main-stacksize= flag.
==188==  The main thread stack size used in this run was 8388608.
==188== 
==188== HEAP SUMMARY:
==188==     in use at exit: 81,056 bytes in 4 blocks
==188==   total heap usage: 7 allocs, 3 frees, 81,144 bytes allocated
==188== 
==188== 160 bytes in 1 blocks are still reachable in loss record 1 of 4
==188==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==188==    by 0x10B45F: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:114)
==188==    by 0x10B2EC: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:443)
==188==    by 0x10B037: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:343)
==188==    by 0x10A9BE: void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (vector.tcc:440)
==188==    by 0x10A52F: std::vector<int, std::allocator<int> >::push_back(int const&) (stl_vector.h:1195)
==188==    by 0x109B2D: main (main.cpp:85)
==188== 
==188== 4,096 bytes in 1 blocks are still reachable in loss record 2 of 4
==188==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==188==    by 0x4AD0D03: _IO_file_doallocate (filedoalloc.c:101)
==188==    by 0x4AE0ECF: _IO_doallocbuf (genops.c:347)
==188==    by 0x4ADFCA3: _IO_file_underflow@@GLIBC_2.2.5 (fileops.c:486)
==188==    by 0x4AE0F85: _IO_default_uflow (genops.c:362)
==188==    by 0x495B4B0: __gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::underflow() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==188==    by 0x4969B22: std::istream::sentry::sentry(std::istream&, bool) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==188==    by 0x4969DA1: std::istream::operator>>(int&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==188==    by 0x109979: main (main.cpp:66)
==188== 
==188== 4,096 bytes in 1 blocks are still reachable in loss record 3 of 4
==188==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==188==    by 0x4AD0D03: _IO_file_doallocate (filedoalloc.c:101)
==188==    by 0x4AE0ECF: _IO_doallocbuf (genops.c:347)
==188==    by 0x4ADFF2F: _IO_file_overflow@@GLIBC_2.2.5 (fileops.c:745)
==188==    by 0x4ADE6B4: _IO_new_file_xsputn (fileops.c:1244)
==188==    by 0x4ADE6B4: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1197)
==188==    by 0x4AD23C0: fwrite (iofwrite.c:39)
==188==    by 0x4985823: std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==188==    by 0x4985BDB: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==188==    by 0x10998C: main (main.cpp:67)
==188== 
==188== 72,704 bytes in 1 blocks are still reachable in loss record 4 of 4
==188==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==188==    by 0x48F8A99: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==188==    by 0x4011B99: call_init.part.0 (dl-init.c:72)
==188==    by 0x4011CA0: call_init (dl-init.c:30)
==188==    by 0x4011CA0: _dl_init (dl-init.c:119)
==188==    by 0x4001139: ??? (in /usr/lib/x86_64-linux-gnu/ld-2.31.so)
==188== 
==188== LEAK SUMMARY:
==188==    definitely lost: 0 bytes in 0 blocks
==188==    indirectly lost: 0 bytes in 0 blocks
==188==      possibly lost: 0 bytes in 0 blocks
==188==    still reachable: 81,056 bytes in 4 blocks
==188==         suppressed: 0 bytes in 0 blocks
==188== 
==188== For lists of detected and suppressed errors, rerun with: -s
==188== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
